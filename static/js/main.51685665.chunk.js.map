{"version":3,"sources":["actions/index.jsx","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibilityTodoList.js","components/Link.js","containers/FilterLink.js","components/Footer.js","App.js","serviceWorker.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.jsx","index.js"],"names":["nextTodoId","VisibilityFilters","connect","_ref","input","dispatch","react_default","a","createElement","onSubmit","e","text","preventDefault","value","type","id","ref","node","Todo","completed","onClick","style","textDecoration","TodoList","todos","toggleTodo","console","dir","map","x","components_Todo","key","filterTodos","filter","log","todo","Error","state","visibilityFilter","Link","active","children","disabled","ownProps","Footer","FilterLink","App","className","containers_AddTodo","VisibilityTodoList","components_Footer","Boolean","window","location","hostname","match","initialTodos","arguments","length","undefined","action","ele","Object","objectSpread","concat","toConsumableArray","combineReducers","store","createStore","rootReducer","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51685665.chunk.js","sourcesContent":["export const toggleTodo = id => {\n  console.log('ACTION: here is action about toggle-todos');\n  return {\n  type: 'TOGGLE_TODO',\n  id\n  }\n}\n\nlet nextTodoId = 4;\nexport const addTodo = text => {\n  return {\n    type: 'ADD_TODO',\n    id: nextTodoId++,\n    text,\n  }\n}\n\nexport const setVisibilityFilter = filter => {\n  return {\n    type: \"SET_VISIBILITY_FILTER\",\n    filter\n  }\n}\n\nexport const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_ACTIVE: 'SHOW_ACTIVE',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../actions'\n\nconst AddTodo = ({ dispatch }) => {\n  let input;\n  return(\n    <form onSubmit={ e => {\n      e.preventDefault();\n      dispatch(addTodo(input.value))\n      input.value = '';\n    } }>\n      <input ref={node => input = node} />\n      <button type=\"submit\">ADD_BUTTON</button>\n    </form>\n  );\n};\n\nexport default connect()(AddTodo);","import React from 'react';\n// import PropTypes from 'prop-types';\n\nconst Todo = ({ text, completed, onClick }) => {\n  return (\n    <li\n      style={{ textDecoration: completed ? 'line-through' : 'none' }}\n      onClick={onClick}\n    >\n    {text}\n    </li>\n  )\n}\n\nexport default Todo;","import React from 'react';\nimport Todo from '../components/Todo';\n\nconst TodoList = ({ todos, toggleTodo }) => {\n  console.dir(todos);\n  return(\n    <ul>\n      {todos.map(x =>\n        <Todo\n          key={x.id}\n          text={x.text}\n          onClick={() => toggleTodo(x.id)}\n          completed={x.completed}\n        />\n      )}\n    </ul>\n  );\n}\n\nexport default TodoList;","import { connect } from 'react-redux';\nimport TodoList from '../components/TodoList';\nimport { toggleTodo } from '../actions'\nimport { VisibilityFilters } from '../actions'\n\nconst filterTodos = (todos, filter) => {\n  switch(filter){\n    case VisibilityFilters.SHOW_ALL:\n      console.log(filter);\n      return todos;\n    case VisibilityFilters.SHOW_ACTIVE:\n      console.log(filter);\n      return todos.filter( todo => !todo.completed);\n    case VisibilityFilters.SHOW_COMPLETED:\n      console.log(filter);\n      return todos.filter( todo => todo.completed);\n    default:\n      throw new Error('invalid VIsibilityFilters:' + filter);\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  todos: filterTodos(state.todos, state.visibilityFilter)\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  toggleTodo: id => {\n    console.log('DISPATCHER: here is to register about dispather');\n    dispatch(toggleTodo(id));\n  }\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList);","import React from 'react';\n\nconst Link = ({ active, children, onClick }) => {\n  return (\n    <button\n      onClick={onClick}\n      disabled={active}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport default Link;","import Link from '../components/Link';\nimport { connect } from 'react-redux';\nimport { setVisibilityFilter } from '../actions';\n\nconst mapStateToProps = (state, ownProps) => ({\n  active: state.visibilityFilter === ownProps.filter\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onClick: () => dispatch(setVisibilityFilter(ownProps.filter))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Link);","import React from 'react';\nimport FilterLink from '../containers/FilterLink';\nimport { VisibilityFilters } from '../actions';\n\nconst Footer = () => {\n  return(\n    <div>\n      <FilterLink filter={VisibilityFilters.SHOW_ALL}>ALL</FilterLink>\n      <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\n      <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\n    </div>\n  );\n};\n\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport AddTodo from './containers/AddTodo';\nimport VisibilityTodoList from './containers/VisibilityTodoList';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      test\n      <AddTodo />\n      <VisibilityTodoList />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialTodos = [\n  {id: 1, text: 'Buy Milk', completed: false},\n  {id: 2, text: 'Read README', completed: false},\n  {id: 3, text: 'Write Blog', completed: false}\n];\n\nconst todos = (state = initialTodos, action) => {\n  switch(action.type){\n    case 'TOGGLE_TODO':\n      console.log('REDUCER: here is toggle-todo reducer');\n      \n      return state.map(ele => {\n        if(ele.id === action.id){\n          return {...ele, completed: !ele.completed};\n        }\n        return ele\n      });\n    case 'ADD_TODO':\n      console.log('REDUCER: add-todo');\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ];\n    default:\n      console.log('REDUCER: here is default reducer');\n      return state;\n  }\n}\n\nexport default todos;","import { VisibilityFilters } from '../actions'\n\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\n  switch(action.type){\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter;\n    default :\n      return state;\n  }\n}\n\nexport default visibilityFilter;","import { combineReducers } from 'redux';\nimport todos from './todos';\nimport visibilityFilter from './visibilityFilter';\n\nexport default combineReducers({\n  todos,\n  visibilityFilter\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}